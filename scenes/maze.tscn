[gd_scene load_steps=21 format=2]

[ext_resource path="res://scripts/TextEdit.gd" type="Script" id=1]
[ext_resource path="res://scripts/maze.gd" type="Script" id=2]
[ext_resource path="res://scenes/wall_scene.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/NewFPS.tscn" type="PackedScene" id=4]
[ext_resource path="res://HDRI/kloofendal_48d_partly_cloudy_puresky_2k.hdr" type="Texture" id=5]
[ext_resource path="res://transparent.png" type="Texture" id=6]
[ext_resource path="res://Textures/floor/pavement_03_diff_1k.jpg" type="Texture" id=7]
[ext_resource path="res://Textures/floor/pavement_03_ao_1k.jpg" type="Texture" id=8]
[ext_resource path="res://Textures/floor/pavement_03_rough_1k.jpg" type="Texture" id=9]

[sub_resource type="BoxShape" id=1]

[sub_resource type="CubeMesh" id=43]

[sub_resource type="SpatialMaterial" id=44]
albedo_texture = ExtResource( 7 )
roughness_texture = ExtResource( 9 )
ao_enabled = true
ao_light_affect = 0.0
ao_texture = ExtResource( 8 )
ao_on_uv2 = false
ao_texture_channel = 0
uv1_scale = Vector3( 160, 160, 1 )

[sub_resource type="PanoramaSky" id=36]
radiance_size = 3
panorama = ExtResource( 5 )

[sub_resource type="Environment" id=37]
background_mode = 2
background_sky = SubResource( 36 )
dof_blur_far_distance = 0.3
dof_blur_near_distance = 3.33
glow_enabled = true
glow_strength = 0.8
glow_bloom = 0.1
glow_blend_mode = 1
adjustment_enabled = true
adjustment_contrast = 1.5
adjustment_saturation = 1.2

[sub_resource type="Shader" id=34]
code = "/////////////////////////////////
// 2D Radial Distortion Shader //
/////////////////////////////////

// Screen space shader for Godot, based on: https://gist.github.com/aggregate1166877/a889083801d67917c26c12a98e7f57a7

shader_type canvas_item;

uniform float aspect = 1.0;
uniform float distortion = 1.0;
uniform float radius = 1.0;
uniform float alpha = 1.0;
uniform float crop = 1.0;
uniform vec4 crop_color : hint_color = vec4(0,0,0,1);

vec2 distort(vec2 p)
{
	float d = length(p);
	float z = sqrt(distortion + d * d * -distortion);
	float r = atan(d, z) / 3.1415926535;
	float phi = atan(p.y, p.x);
	return vec2(r * cos(phi) * (1.0 / aspect) + 0.5, r * sin(phi) + 0.5);
}

void fragment()
{
	vec2 xy = (SCREEN_UV * 2.0 - 1.0); // move origin of UV coordinates to center of screen

	xy = vec2(xy.x * aspect, xy.y); // adjust aspect ratio

	float d = length(xy); // distance from center

	vec4 tex;

	if (d < radius)
	{
		xy = distort(xy);
		tex = texture(SCREEN_TEXTURE, xy);
		COLOR = tex;
		COLOR.a = alpha;
	}

	// radial crop
	if (d > crop)
	{
		COLOR = crop_color;
	}
}"

[sub_resource type="ShaderMaterial" id=35]
shader = SubResource( 34 )
shader_param/aspect = 0.05
shader_param/distortion = 0.7
shader_param/radius = 1.0
shader_param/alpha = 1.0
shader_param/crop = 1.0
shader_param/crop_color = Color( 0, 0, 0, 1 )

[sub_resource type="Shader" id=32]
code = "// chromatic aberration
//---------------------------------

shader_type canvas_item;

uniform vec2 r_displacement = vec2(1.0, 0.0);
uniform vec2 g_displacement = vec2(0.0, 0.0);
uniform vec2 b_displacement = vec2(-1.0, 0.0);


void fragment()
{
	float r = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE*r_displacement), 0.0).r;
	float g = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE*g_displacement), 0.0).g;
	float b = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE*b_displacement), 0.0).b;
	
	COLOR = vec4(r, g, b, 0.7);
}"

[sub_resource type="ShaderMaterial" id=33]
shader = SubResource( 32 )
shader_param/r_displacement = Vector2( 3, 0 )
shader_param/g_displacement = Vector2( 0, 0 )
shader_param/b_displacement = Vector2( -3, 0 )

[sub_resource type="Shader" id=41]
code = "shader_type canvas_item;

// Simple 2D noise function
float random(vec2 p) {
    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
}

void fragment() {
    // Get the original color of the fragment
    vec4 original_color = texture(TEXTURE, UV);
    
    // Generate noise based on UV coordinates
    float noise = random(UV * 100.0);
    
    // Apply a yellowish tint with increased noise
    vec3 yellow_tint = vec3(1.0, 0.9, 0.5);
    vec3 tinted_color = mix(original_color.rgb, yellow_tint, 0.5) + noise * 0.15; // Increased noise intensity
    
    // Output the final color with transparency
    COLOR = vec4(tinted_color, 0.2); // Set a fixed transparency to blend with the environment
}
"

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 41 )

[node name="Spatial" type="Spatial"]
script = ExtResource( 2 )
wall_scene = ExtResource( 3 )
character_scene = ExtResource( 4 )

[node name="floor" type="StaticBody" parent="."]
transform = Transform( 150, 0, 0, 0, 1, 0, 0, 0, 150, 0, -1, 0 )

[node name="CollisionShape" type="CollisionShape" parent="floor"]
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="floor/CollisionShape"]
mesh = SubResource( 43 )
material/0 = SubResource( 44 )

[node name="FPS_indicator" type="TextEdit" parent="."]
margin_left = 798.0
margin_top = 94.0
margin_right = 854.001
margin_bottom = 112.0
rect_scale = Vector2( 1.34321, 1.49984 )
script = ExtResource( 1 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.822404, 0.365793, -0.435714, -0.136246, 0.870235, 0.473422, 0.552348, -0.32998, 0.765523, -8.40893, 6.59706, 0.037689 )
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 37 )

[node name="fisheye" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="fisheye"]
material = SubResource( 35 )
margin_right = 1024.0
margin_bottom = 600.0

[node name="chromatic_abbretion" type="CanvasLayer" parent="."]

[node name="Sprite" type="Sprite" parent="chromatic_abbretion"]
material = SubResource( 33 )
position = Vector2( 511.5, 300 )
scale = Vector2( 0.532812, 1.3544 )
texture = ExtResource( 6 )

[node name="tint_noise" type="CanvasLayer" parent="."]

[node name="Sprite" type="Sprite" parent="tint_noise"]
material = SubResource( 42 )
position = Vector2( 512, 300 )
scale = Vector2( 0.533333, 1.3544 )
texture = ExtResource( 6 )
